<Ui xmlns="http://www.blizzard.com/wow/ui/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.blizzard.com/wow/ui/..\FrameXML\UI.xsd">

    <!--
        Vendor.Options.SmallCheckTemplate
            This template is a smaller version of the check template, which contains only a label in the
            normal font color. We use this for secondary options which don't need additional display text
    -->
    <Frame name="Vendor_Setting_Check_Small" virtual="true">
        <Layers>
            <Layer level="ARTWORK">
                <FontString parentKey="Label" inherits="GameFontHighlight" justifyH="LEFT" JustifyV="CENTER">
                    <Anchors>
                        <Anchor point="TOPLEFT" x="20" y="0"/>>
                        <Anchor point="BOTTOMRIGHT" relativePoint="TOPRIGHT" x="0" y="-16"/>
                    </Anchors>
                </FontString>
                <FontString parentKey="Text" inherits="GameFontNormalSmall" justifyH="LEFT" justifyV="TOP">
                    <Anchors>
                        <Anchor point="TOPLEFT"  x="20" y="-20"/>
                        <Anchor point="BOTTOMRIGHT" x="0" y="0"/>
                    </Anchors>
                </FontString>				
            </Layer>
        </Layers>
        <Frames>
            <CheckButton parentKey="State" inherits="OptionsBaseCheckButtonTemplate">
                <Size x="16" y="16"/>
                <Anchors>
                    <Anchor point="TOPLEFT" x="0" y="0"/>
                </Anchors>
                <Scripts>
                    <OnClick>
						local handler = self:GetParent().OnChange
						if (handler) then
							handler(self:GetChecked())
						end
					</OnClick>
                    <OnEnable>
                        self:GetParent().Label:SetTextColor(HIGHLIGHT_FONT_COLOR.r, HIGHLIGHT_FONT_COLOR.g, HIGHLIGHT_FONT_COLOR.b)
                        self:GetParent().Text:SetTextColor(DISABLED_FONT_COLOR.r, DISABLED_FONT_COLOR.g, DISABLED_FONT_COLOR.b)
                    </OnEnable>
                    <OnDisable>
                        self:GetParent().Label:SetTextColor(DISABLED_FONT_COLOR.r, DISABLED_FONT_COLOR.g, DISABLED_FONT_COLOR.b)
                        self:GetParent().Text:SetTextColor(DISABLED_FONT_COLOR.r, DISABLED_FONT_COLOR.g, DISABLED_FONT_COLOR.b)
                    </OnDisable>
                </Scripts>
            </CheckButton>
        </Frames>
		<Scripts>
			<OnLoad>
				self.Label.LocKey = self.LabelLocKey
				if (self.TextLocKey) then 
					self.Text.LocKey = self.TextLocKey
				else
					self.Text:Hide()
				end
				self.Enable = function(_)
					self.State:Enable()
				end
				self.Disable = function(_)
					self.State:Disable()
				end
				self.SetChecked = function(_, state)				
					self.State:SetChecked(state == true)
				end
			</OnLoad>
		</Scripts>
    </Frame>

    <!--
        Vendor.Options.SmallCheckTemplate.WithText
            This template is a smaller version of the check template, which contains both a label
            and also the description text. are rendered in the normal font color to indicate
            that it's a secondary option.
    -->
    <Frame name="Vendor_Setting_Checkbox" virtual="true">
        <Layers>
            <Layer level="ARTWORK">
                <FontString parentKey="Label" inherits="GameFontHighlightLarge" justifyH="LEFT" JustifyV="CENTER">
                    <Anchors>
                        <Anchor point="TOPLEFT" x="28" y="0"/>>
                        <Anchor point="BOTTOMRIGHT" x="0" y="-20" relativePoint="TOPRIGHT"/>
                    </Anchors>
                </FontString>
                <FontString parentKey="Text" inherits="GameFontNormalSmall" justifyH="LEFT" justifyV="TOP">
                    <Anchors>
                        <Anchor point="TOPLEFT"  x="28" y="-24"/>
                        <Anchor point="BOTTOMRIGHT" x="0" y="0"/>
                    </Anchors>
                </FontString>
            </Layer>
        </Layers>
        <Frames>
            <CheckButton parentKey="State" inherits="OptionsBaseCheckButtonTemplate">
                <Size x="24" y="24"/>
                <Anchors>
                    <Anchor point="TOPLEFT" x="0" y="0"/>
                </Anchors>
                <Scripts>
                    <OnClick>
						local handler = self:GetParent().OnChange
						if (handler) then
							handler(self:GetChecked())
						end
					</OnClick>
                    <OnEnable>
                        self:GetParent().Label:SetTextColor(HIGHLIGHT_FONT_COLOR.r, HIGHLIGHT_FONT_COLOR.g, HIGHLIGHT_FONT_COLOR.b)
                        self:GetParent().Text:SetTextColor(NORMAL_FONT_COLOR.r, NORMAL_FONT_COLOR.g, NORMAL_FONT_COLOR.b)
                    </OnEnable>
                    <OnDisable>
                        self:GetParent().Label:SetTextColor(DISABLED_FONT_COLOR.r, DISABLED_FONT_COLOR.g, DISABLED_FONT_COLOR.b)
                        self:GetParent().Text:SetTextColor(DISABLED_FONT_COLOR.r, DISABLED_FONT_COLOR.g, DISABLED_FONT_COLOR.b)
                    </OnDisable>
                </Scripts>
            </CheckButton>
        </Frames>
		<Scripts>
			<OnLoad>
				self.Label.LocKey = self.LabelLocKey
				if (self.TextLocKey) then
					self.Text.LocKey = self.TextLocKey
				else
					self.Text:Hide()
				end
				self.Enable = function(_)
					self.State:Enable()
				end
				self.Disable = function(_)
					self.State:Disable()
				end
				self.SetChecked = function(_, state)				
					self.State:SetChecked(state == true)
				end
                self.SetEnabled = function(_, state)
                    if (state) then
                        self.State:Enable()
                    else
                        self.State:Disable()
                    end
                end
			</OnLoad>
		</Scripts>
    </Frame>	

    <!--
        Vendor.Options.SliderTemplate
            Template used for a slider (value contained to range) this contains the label, instructional text,
            slider which includes max/min and value text
    -->
    <Frame name="Vendor_Setting_Slider" virtual="true">
        <Layers>
            <Layer level="ARTWORK">
                <FontString parentKey="Label" inherits="GameFontHighlightLarge" justifyH="LEFT" JustifyV="CENTER">
                    <Anchors>
                        <Anchor point="TOPLEFT" x="0" y="0"/>
                        <Anchor point="BOTTOMRIGHT" x="0" y="-20" relativePoint="TOPRIGHT"/>
                    </Anchors>
                </FontString>
                <FontString name="$parent.Text" parentKey="Text" inherits="GameFontNormalSmall" justifyH="LEFT" justifyV="TOP">
                    <Anchors>
                        <Anchor point="TOPLEFT"  x="0" y="-24"/>
                        <Anchor point="BOTTOMRIGHT" x="0" y="20"/>
                    </Anchors>
                </FontString>
                <FontString parentKey="Max" inherits="GameFontNormalSmall" justifyH="LEFT" justifyV="CENTER" text="max">
                    <Size x="30" y="16"/>
                    <Anchors>
                        <Anchor point="TOPRIGHT" relativePoint="BOTTOMRIGHT" relativeKey="$parent.Text" y="-4" x="-8"/>
                    </Anchors>
                </FontString>
                <FontString parentKey="Min" inherits="GameFontNormalSmall" justifyH="RIGHT" justifyV="CENTER" text="min">
                    <Size x="30" y="16"/>
                    <Anchors>
                        <Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeKey="$parent.Text" y="-4" x="8"/>
                    </Anchors>
                </FontString>
                <FontString parentKey="DisplayValue" inherits="GameFontGreen" justifyH="CENTER" justifyV="TOP">
                    <Anchors>
                        <Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" y="-4" relativeKey="$parent.Min" />
                        <Anchor point="TOPRIGHT" relativePoint="BOTTOMRIGHT" y="-4" relativeKey="$parent.Max" />
                    </Anchors>
                </FontString>

            </Layer>
        </Layers>
        <Frames>
            <Slider parentKey="Value"  obeyStepOnDrag="true" inherits="HorizontalSliderTemplate">
                <Size x="10" y="16"/>
                <Anchors>
                    <Anchor point="LEFT" relativePoint="RIGHT" relativeKey="$parent.Min" x="8" />
                    <Anchor point="RIGHT" relativePoint="LEFT" relativeKey="$parent.Max" x="-8" />
                </Anchors>
                <Scripts>
                    <OnValueChanged>
                        local parent = self:GetParent()
                        local fmt = parent.NumFormat or "%d"
                        parent.DisplayValue:SetFormattedText(fmt, value)

                        if (type(parent.OnChange) == "function") then
                            parent.OnChange(value)
                        end
                    </OnValueChanged>
                </Scripts>
            </Slider>
        </Frames>
        <Scripts>
            <OnLoad>
                local color = HIGHLIGHT_FONT_COLOR
                self.Min:SetTextColor(color.r, color.g, color.b, 0.8)
                self.Max:SetTextColor(color.r, color.g, color.b, 0.8)

                local key = self.LabelLocKey
                if (type(key) == "string") then
                    self.Label.LocKey = key
                end

                key = self.TextLocKey
                if (type(key) == "string") then
                    self.Text.LocKey = key
                else
                    self.Text:Hide()
                    local h = self:GetHeight() - self.Text:GetHeight()
                    self.Text:SetHeight(0)
                    self:SetHeight(h)
                end

                local max = self.MaxValue or 0
                local min = self.MinValue or 10
                local numfmt = self.NumFormat or "%d"

                self.Max:SetFormattedText(numfmt, max)
                self.Min:SetFormattedText(numfmt, min)
                self.Value:SetMinMaxValues(min, max)
                self.Value:SetValueStep(self.Step or 1)

                self.SetValue = function(_, value)
                    value = math.max(value, min)
                    value = math.min(value, max)
                    self.Value:SetValue(value)
                    self.DisplayValue:SetFormattedText(numfmt, value)
                end
            </OnLoad>
        </Scripts>
    </Frame>


    <Frame name="Vendor_Settings_Panel" virtual="true">
        <Layers>
            <Layer level="ARTWORK">
                <FontString  parentKey="HelpText" inherits="GameFontHighlight" JustifyV="TOP" JustifyH="LEFT">
                    <Size x="10" y="60"/>
                    <Anchors>
                        <Anchor point="TOPLEFT" x="16" y="-16"/>
                        <Anchor point="TOPRIGHT" x="-16" y="-16"/>
                    </Anchors>
                </FontString>
            </Layer>
        </Layers>
        <Frames>
            <Frame hidden="true">
                <Scripts>
                    <OnLoad>
                        self:GetParent():Hide()
                        local helpText = self:GetParent().HelpText
                        local lockey =self:GetParent().HelpTextLocKey

                        if (type(lockey) == "string") then
                            helpText.LocKey = lockey
                        else
                            helpText:Hide()
                            helpText:SetHeight(0)
                        end
                    </OnLoad>
                </Scripts>
            </Frame>
        </Frames>
    </Frame>

</Ui>
